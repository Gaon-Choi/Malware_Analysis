import numpy
import imageio
import os
import array
from PIL import Image

from concurrent.futures import ProcessPoolExecutor, as_completed
from tqdm import tqdm

number_of_samples = 500

def is_vir(input_file):
    ext = os.path.splitext(os.path.basename(input_file))[1]
    result = False
    if '.vir' == ext:
        result = True
    return result

def generate_and_save_image(input_dir, output_dir, filename):
    out_file = os.path.splitext(os.path.basename(filename))[0] + '.png'
    out_file_full = os.path.join(output_dir, out_file)
    input_file_path = os.path.join(input_dir, filename)
    if is_vir(filename):
        with open(input_file_path, 'rb') as f:
            ln = os.path.getsize(input_file_path)  # length of file in bytes
            width = 32
            rem = ln % width

            a = array.array("B")
            a.fromfile(f, ln - rem)

        g = numpy.reshape(a, (len(a) // width, width))
        g = numpy.uint8(g)

        Image.fromarray(g).resize((32, 32)).save(out_file_full)

        # imageio.imwrite(out_file_full, g)

    else:
        print("not .vir")

def convert_bin_to_img(input_dir, output_dir):
    if not os.path.isdir(input_dir):
        print(input_dir, 'Input directory not found. Exiting.')
        exit(0)

    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)

    files = os.listdir(input_dir)

    with ProcessPoolExecutor(max_workers=16) as executor:
        future_to_url = {executor.submit(generate_and_save_image, input_dir, output_dir, filename):
         filename for filename in files}
        for future in tqdm(as_completed(future_to_url), total=len(future_to_url)):
            files = future_to_url[future]

def main():
    convert_bin_to_img('../vir/train', '../img/train')
    convert_bin_to_img('../vir/valid', '../img/valid')
    convert_bin_to_img('../vir/test1', '../img/test1')
    convert_bin_to_img('../vir/test2', '../img/test2')

if __name__ == '__main__':
    main()